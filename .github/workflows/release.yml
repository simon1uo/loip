name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type (patch, minor, major)'
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major

# Set explicit permissions for the GITHUB_TOKEN
permissions:
  contents: write    # This allows pushing to the repository
  pull-requests: write
  issues: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org/'

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Check Git Status
        id: git_status
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "Working directory is not clean"
            echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
          else
            echo "Working directory is clean"
            echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit Changes If Needed
        if: steps.git_status.outputs.HAS_CHANGES == 'true'
        run: |
          git add .
          git commit -m "chore: auto-commit changes before version bump"

      - name: Bump version
        id: version
        run: |
          # Use pnpm to execute npm version command
          pnpm exec npm version ${{ github.event.inputs.version }}
          VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Push changes
        run: git push --follow-tags

      - name: Generate Changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            # If there's no previous tag, get all commits
            echo "No previous tag found. Including all commits in changelog."
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            # Get commits between the previous tag and HEAD
            echo "Generating changelog from $PREVIOUS_TAG to current commit."
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges $PREVIOUS_TAG..HEAD)
          fi

          # Group commits by type (feat, fix, chore, etc.)
          FEATURES=$(echo "$CHANGELOG" | grep -E "^\* feat(\(.*\))?:" || echo "")
          FIXES=$(echo "$CHANGELOG" | grep -E "^\* fix(\(.*\))?:" || echo "")
          CHORES=$(echo "$CHANGELOG" | grep -E "^\* chore(\(.*\))?:" || echo "")
          DOCS=$(echo "$CHANGELOG" | grep -E "^\* docs(\(.*\))?:" || echo "")
          REFACTOR=$(echo "$CHANGELOG" | grep -E "^\* refactor(\(.*\))?:" || echo "")
          TESTS=$(echo "$CHANGELOG" | grep -E "^\* test(\(.*\))?:" || echo "")
          OTHER=$(echo "$CHANGELOG" | grep -v -E "^\* (feat|fix|chore|docs|refactor|test)(\(.*\))?:" || echo "")

          # Create formatted changelog
          FORMATTED_CHANGELOG="## What's Changed\n\n"

          if [ ! -z "$FEATURES" ]; then
            FORMATTED_CHANGELOG+="### Features\n$FEATURES\n\n"
          fi

          if [ ! -z "$FIXES" ]; then
            FORMATTED_CHANGELOG+="### Bug Fixes\n$FIXES\n\n"
          fi

          if [ ! -z "$DOCS" ]; then
            FORMATTED_CHANGELOG+="### Documentation\n$DOCS\n\n"
          fi

          if [ ! -z "$REFACTOR" ]; then
            FORMATTED_CHANGELOG+="### Code Refactoring\n$REFACTOR\n\n"
          fi

          if [ ! -z "$CHORES" ]; then
            FORMATTED_CHANGELOG+="### Chores\n$CHORES\n\n"
          fi

          if [ ! -z "$TESTS" ]; then
            FORMATTED_CHANGELOG+="### Tests\n$TESTS\n\n"
          fi

          if [ ! -z "$OTHER" ]; then
            FORMATTED_CHANGELOG+="### Other Changes\n$OTHER\n\n"
          fi

          # Save changelog to file and to output
          echo "$FORMATTED_CHANGELOG" > CHANGELOG.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$FORMATTED_CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## Version v${{ steps.version.outputs.version }}

            ${{ steps.changelog.outputs.changelog }}

            ## Installation
            ```bash
            npm install loip
            # or
            pnpm add loip
            # or
            yarn add loip
            ```
          draft: false
          prerelease: false
